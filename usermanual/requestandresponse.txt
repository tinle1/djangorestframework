Tutorial 2: Requests and Responses

From this point we're going to really start covering the core og REST framework Let's introduce a couple of essetial building blocks

Step 1: Request objects
	REST framework introduces a Request object that extends the regular HttpRequest and provides more flexible request parsing
	The core functionality of the Request object is the request.data atribute which is similar to request.POST but more useful for working with Web APIs


	request.POST  # Only handles form data.  Only works for 'POST' method.
	request.data  # Handles arbitrary data.  Works for 'POST', 'PUT' and 'PATCH' methods.


step 2: Response objects

	REST framework also introduces a Response object, which is a type of TemplateResponse that takkes unrendered content and uses content negotiation to determine the correct content type to return to the client

	return Response (data) # Renders to content type as requested by the client.

step 3: Status codes
REST framework provides more explicit identifiers for each status code such as HTTP_400_BAD_REQUEST in the status module

step 4: Wrapping API views
REST framework provides two wrappers you can use to write API views
	The @api_view decorator for working with function based views.
	The APIView class for working with class-based views.

step 5: Pulling it all together

We don't need our JSONReponse class in view.py any more so go ahead and delete that. Once that's done we can start refactoring our view slightly.

from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from snippets.models import Snippet
from snippets.serializers import SnippetSerializer


@api_view(['GET', 'POST'])
def snippet_list(request):
    """
    List all code snippets, or create a new snippet.
    """
    if request.method == 'GET':
        snippets = Snippet.objects.all()
        serializer = SnippetSerializer(snippets, many=True)
        return Response(serializer.data)

    elif request.method == 'POST':
        serializer = SnippetSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


Here is view for an individual snippet in the view.py module 

@api_view(['GET', 'PUT', 'DELETE'])
def snippet_detail(request, pk):
    """
    Retrieve, update or delete a code snippet.
    """
    try:
        snippet = Snippet.objects.get(pk=pk)
    except Snippet.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = SnippetSerializer(snippet)
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = SnippetSerializer(snippet, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        snippet.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

Notice that we're no longer explicitly tying our requests or responses to a given content type. request.data can handle incoming json requests but it can also handle other formats similarly we're returning response objects with data but allowing REST framework to render the response into the correct content type of us



step 6: Adding optional format suffixes to our URLs

	To take advantage of the fact that our responses are no longer hardwired to a single content type let's add support for format suffixes to our API endpoints
	Start by adding a format keyword argument to both of the views like so.

def snippet_list (request, format = None):

and

def snippet_detail(request, pk, format = None):
Now update the snippets/urls.py file slightly to append a set of format_suffix_patterns in addition to the existing URLs.

from django.urls import path
from rest_framework.urlpatterns import format_suffix_patterns
from snippets import views

urlpatterns = [
    path('snippets/', views.snippet_list),
    path('snippets/<int:pk>', views.snippet_detail),
]

urlpatterns = format_suffix_patterns(urlpatterns)

How's it looking?
What's next?
